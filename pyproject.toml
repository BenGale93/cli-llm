[project]
name = "cli-llm"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "click>=8.1.7",
    "jinja2>=3.1.4",
    "llm-ollama>=0.5.0",
    "llm>=0.16",
    "rich>=13.8.1",
]

[project.scripts]
clm = "cli_llm.cli:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "mypy>=1.11.2",
    "pytest>=8.3.3",
    "pytest-randomly>=3.15.0",
    "ruff>=0.6.8",
    "pytest-cov>=5.0.0",
    "pytest-grabbag",
]

[tool.uv.sources]
pytest-grabbag = { path = "../pytest_grabbag", editable = true }

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["ALL"]
ignore = ["COM812", "ISC001", "ANN401"]

[tool.ruff.lint.per-file-ignores]
# Ignore all directories named `tests`.
"tests/**" = ["D", "S", "ANN"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
exclude = "build"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pytest_grabbag.*"
strict = true

[[tool.mypy.overrides]]
module = "tests.*"
strict = true
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_subclassing_any = false

[tool.coverage.report]
exclude_also = ["if t.TYPE_CHECKING", "@t.overload", "@abstractmethod"]
fail_under = 100
show_missing = true

[tool.coverage.run]
branch = true

[tool.pytest.ini_options]
addopts = "--cov=src/ --cov-append"
filterwarnings = [
    "ignore::DeprecationWarning::",            # ignore deprecations from all modules
    "default::DeprecationWarning:mymodule.*:", # except from mymodule
]
